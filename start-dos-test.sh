#!/usr/bin/env bash
set -ex
#############################
[[ ! "$CLUSTER" ]] && echo no CLUSTER && exit 1
[[ ! "$SOLANA_REPO" ]] && echo no SOLANA_REPO && exit 1
[[ ! "$SOLANA_BUILD_BRANCH" ]]&&[[ ! "$SOLANA_GIT_COMMIT" ]]&& echo No SOLANA_BUILD_BRANCH or SOLANA_GIT_COMMIT > exit 1
[[ ! "$SOLANA_METRICS_CONFIG" ]] && echo no SOLANA_METRICS_CONFIG ENV && exit 1
[[ ! "$MANGO_CONFIGURE_REPO" ]] && echo no MANGO_CONFIGURE_REPO ENV && exit 1
[[ ! "$MANGO_CONFIGURE_BRANCH" ]] && echo no MANGO_CONFIGURE_BRANCH ENV && exit 1

[[ ! "$DURATION" ]] && echo no DURATION && exit 1
[[ ! "$QOUTES_PER_SECOND" ]] && echo no QOUTES_PER_SECOND && exit 1
[[ ! "$ENDPOINT" ]]&& echo "No ENDPOINT" > dos-env.out && exit 1
[[ ! "$RUN_KEEPER" ]] && RUN_KEEPER="true" >> dos-env.out
[[ ! "$AUTHORITY_FILE" ]] && echo no AUTHORITY_FILE && exit 1
[[ ! "$ID_FILE" ]] && echo no ID_FILE && exit 1
[[ ! "$ACCOUNT_FILE" ]]&&echo no ACCOUNT_FILE && exit 1
[[ ! "$KEEPER_GROUP" ]] && echo no KEEPER_GROUP && exit 1
[[ ! "$KEEPER_ENDPOINT" ]] && echo no KEEPER_ENDPOINT && exit 1
[[ ! "$KEEPER_CONSUME_EVENTS_INTERVAL" ]] && echo no KEEPER_CONSUME_EVENTS_INTERVAL && exit 1
[[ ! "$KEEPER_CONSUME_EVENTS_LIMIT" ]] && echo no KEEPER_CONSUME_EVENTS_LIMIT && exit 1
[[ ! "$KEEPER_UPDATE_CACHE_INTERVAL" ]] && echo no KEEPER_UPDATE_CACHE_INTERVAL && exit 1
[[ ! "$KEEPER_UPDATE_ROOT_BANK_CACHE_INTERVAL" ]] && echo no KEEPER_UPDATE_ROOT_BANK_CACHE_INTERVAL && exit 1

#### metrics env ####
echo SOLANA_METRICS_CONFIG=\"$SOLANA_METRICS_CONFIG\" >> dos-env.out
#### keeper ENV ####
export CLUSTER=$CLUSTER
export GROUP=$KEEPER_GROUP
export ENDPOINT_URL=$KEEPER_ENDPOINT
export CONSUME_EVENTS_INTERVAL=$KEEPER_CONSUME_EVENTS_INTERVAL
export CONSUME_EVENTS_LIMIT=$KEEPER_CONSUME_EVENTS_LIMIT
export UPDATE_CACHE_INTERVAL=$KEEPER_UPDATE_CACHE_INTERVAL # def 3000
export UPDATE_ROOT_BANK_CACHE_INTERVAL=$KEEPER_UPDATE_ROOT_BANK_CACHE_INTERVAL # def 5000


download_file() {
	for retry in 0 1
	do
		if [[ $retry -gt 1 ]];then
			break
		fi
		gsutil cp  gs://mango_bencher-dos/$1 ./
		if [[ ! -f "$1" ]];then
			echo "NO $1 found, retry"
            sleep 5
		else
			break
		fi
	done
}

echo --- stage: download files in $HOME Directory for dos-test and dos-test report -----
cd $HOME
## download files 
[[ -f "$AUTHORITY_FILE" ]] && rm -rf $AUTHORITY_FILE
download_file $AUTHORITY_FILE
[[ ! -f "$AUTHORITY_FILE" ]]&&echo no $AUTHORITY_FILE file && exit 1
[[ -f "$ID_FILE" ]] && rm -rf $ID_FILE
download_file $ID_FILE
[[ ! -f "$ID_FILE" ]]&&echo no $ID_FILE file && exit 1
echo $ACCOUNTS
download_accounts=( $ACCOUNTS )
for acct in ${download_accounts[@]}
do
  [[ -f "$acct" ]] && rm -rf $acct
  echo --- start to download $acct
  download_file $acct
  [[ ! -f "$acct" ]]&&echo no $acct file && exit 1
done

# download solana and prepare solana repo
cd $HOME
[[ -d $SOLANA_REPO ]] && rm -rf $SOLANA_REPO
git clone $SOLANA_REPO
cd $HOME/solana
if [[ "$SOLANA_GIT_COMMIT" ]];then
    git checkout $SOLANA_GIT_COMMIT
elif [[ "$SOLANA_BUILD_BRANCH" ]];then
    git checkout $SOLANA_BUILD_BRANCH
else 
	echo "No SOLANA_BUILD_BRANCH or SOLANA_GIT_COMMIT" && exit 1
fi
## Prepare Metrics Env
[[ ! -d "$HOME/solana" ]]&& echo no solana && exit 1
cd $HOME/solana/scripts
ret_config_metric=$(exec ./configure-metrics.sh || true )

if [[ "$RUN_KEEPER" == "true" ]] ;then
	echo -- stage: prepare Keeper Environment
	# download mango_bencher
	# pre-requicy by configure_mango
	cd $HOME
	curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
	sudo apt-get install -y nodejs
	sudo npm install -g typescript
	sudo npm install -g ts-node
	sudo npm install -g yarn
	# download configure_mango repo
	git clone $MANGO_CONFIGURE_REPO
	cd $BUILD_DEPENDENCY_CONFIGUERE_DIR
	# warning package-lock.json found. 
	# Your project contains lock files generated by tools other than Yarn. 
	# It is advised not to mix package managers in order to avoid resolution inconsistencies caused by unsynchronized lock files.
	# To clear this warning, remove package-lock.json.
	# Memo by author: use yarn instead of npm install
	rm package-lock.json || true
	git checkout $MANGO_CONFIGURE_BRANCH
	cp $HOME/$ID_FILE $BUILD_DEPENDENCY_CONFIGUERE_DIR
	cp $HOME/$AUTHORITY_FILE $BUILD_DEPENDENCY_CONFIGUERE_DIR
	[[ ! "$BUILD_DEPENDENCY_CONFIGUERE_DIR/$ID_FILE" ]]&& echo no $ID_FILE in  $BUILD_DEPENDENCY_CONFIGUERE_DIR && exit 1
	[[ ! "$BUILD_DEPENDENCY_CONFIGUERE_DIR/$AUTHORITY_FILE" ]]&& echo no $AUTHORITY_FILE in $BUILD_DEPENDENCY_CONFIGUERE_DIR && exit 1
	yarn install && yarn add @blockworks-foundation/mango-client
fi
## Run Keeper.ts
if [[ "$RUN_KEEPER" == "true" ]] ;then
	echo --- stage: Run Keeper -----
    cd $BUILD_DEPENDENCY_CONFIGUERE_DIR
    k_log="$HOSTNAME-keeper.log"
    # Important artifact: keeper.log
    echo --- start to run keeper
    ret_keeper=$(yarn ts-node keeper.ts > $k_log 2> 1 &)
fi

echo --- stage: Run Solana-bench-mango -----
#### mango_bencher ENV printout for checking ####
[[ ! "$DURATION" ]] &&  DURATION=120 && echo DURATION=$DURATION >> dos-env.out
[[ ! "$QOUTES_PER_SECOND" ]] &&  QOUTES_PER_SECOND=1 && echo QOUTES_PER_SECOND=$QOUTES_PER_SECOND >> dos-env.out
[[ ! "$CLUSTER" ]] &&  CLUSTER="mainnet-beta" && echo CLUSTER=$CLUSTER >> dos-env.out
[[ ! "$ENDPOINT" ]] &&  ENDPOINT="https://api.mainnet-beta.solana.com" && echo ENDPOINT=$ENDPOINT >> dos-env.out
[[ ! "$AUTHORITY_FILE" ]] &&  AUTHORITY_FILE="authority.json" && echo AUTHORITY_FILE=$AUTHORITY_FILE >> dos-env.out
[[ ! "$ACCOUNT_FILE" ]] &&  ACCOUNT_FILE="account.json" && echo ACCOUNT_FILE=$ACCOUNT_FILE >> dos-env.out
[[ ! "$ID_FILE" ]] &&  ID_FILE="id.json" && echo ID_FILE=$ID_FILE >> dos-env.out

# benchmark exec
cd $HOME
download_file solana-bench-mango
chmod +x solana-bench-mango
b_cluster_ep=$ENDPOINT
b_auth_f="$HOME/$AUTHORITY_FILE"
b_acct_f="$HOME/$ACCOUNT_FILE"
b_id_f="$HOME/$ID_FILE"
b_mango_cluster=$CLUSTER
b_duration=$DURATION
b_q=$QOUTES_PER_SECOND
b_tx_save_f="$HOSTNAME-TLOG.csv"
b_block_save_f="$HOSTNAME-BLOCK.csv"
b_error_f="$HOSTNAME-error.txt"
echo $(pwd)
echo --- start of benchmark $(date)
ret_bench=$(./solana-bench-mango -u $b_cluster_ep --identity $b_auth_f --accounts $b_acct_f --mango $b_id_f --mango-cluster $b_mango_cluster --duration $b_duration -q $b_q --transaction_save_file $b_tx_save_f --block_data_save_file $b_block_save_f 2> $b_error_f &)
echo --- end of benchmark $(date)
echo --- write down log in log-files.out ---
echo $b_tx_save_f > $HOME/log-files.out
echo $b_block_save_f >> $HOME/log-files.out
echo $b_error_f >> $HOME/log-files.out
echo $k_log >> $HOME/log-files.out

## solana-bench-mango -- -u ${NET_OR_IP} --identity ../configure_mango/authority.json 
## --accounts ../configure_mango/accounts-20.json  --mango ../configure_mango/ids.json 
## --mango-cluster ${IP_OF_MANGO_CLIENT} --duration 60 -q 128 --transaction_save_file tlog.csv 
## --block_data_save_file blog.csv  2> err.txt &